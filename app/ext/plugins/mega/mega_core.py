import discord
from discord import app_commands, Interaction, Embed, Member, TextChannel, Role
from discord.ext import commands

# –ì—Ä—É–ø–ø–∞: /mega <subcommand>
mega = app_commands.Group(name="mega", description="Mega toolkit: admin & utilities")


def require_perms(**perms):
    def decorator(fn):
        async def wrapper(interaction: Interaction, *args: object, **kwargs: object):
            if not interaction.user.guild_permissions.administrator:
                missing = [
                    k for k, v in perms.items()
                    if v and not getattr(interaction.user.guild_permissions, k, False)
                ]
                if missing:
                    await interaction.response.send_message(
                        f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è {', '.join(missing)}", ephemeral=True
                    )
                    return
            return await fn(interaction, *args, **kwargs)
        return wrapper
    return decorator


class Mega(commands.Cog):
    def __init__(self, bot: commands.Bot):
        self.bot = bot

    # ---------- utils ----------
    @mega.command(name="ping", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞")
    async def m_ping(self, interaction: Interaction):
        await interaction.response.send_message(
            f"Pong! {round(self.bot.latency * 1000)}ms", ephemeral=True
        )

    @mega.command(name="avatar", description="–ü–æ–∫–∞–∑–∞—Ç—å –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    async def m_avatar(self, interaction: Interaction, user: Member | None = None):
        user = user or interaction.user
        embed = Embed(title=f"–ê–≤–∞—Ç–∞—Ä {user}", color=discord.Color.blurple())
        embed.set_image(url=user.display_avatar.url)
        await interaction.response.send_message(embed=embed)

    # ---------- moderation ----------
    @mega.command(name="lock", description="–ó–∞–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è @everyone")
    @require_perms(manage_channels=True)
    async def m_lock(self, interaction: Interaction):
        chan = interaction.channel
        assert isinstance(chan, TextChannel)
        overwrites = chan.overwrites_for(interaction.guild.default_role)
        overwrites.send_messages = False
        await chan.set_permissions(interaction.guild.default_role, overwrite=overwrites)
        await interaction.response.send_message("üîí –ö–∞–Ω–∞–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", ephemeral=True)

    @mega.command(name="unlock", description="–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –¥–ª—è @everyone")
    @require_perms(manage_channels=True)
    async def m_unlock(self, interaction: Interaction):
        chan = interaction.channel
        assert isinstance(chan, TextChannel)
        overwrites = chan.overwrites_for(interaction.guild.default_role)
        overwrites.send_messages = None
        await chan.set_permissions(interaction.guild.default_role, overwrite=overwrites)
        await interaction.response.send_message("üîì –ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç", ephemeral=True)

    @mega.command(name="clean", description="–£–¥–∞–ª–∏—Ç—å N —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ 100)")
    @require_perms(manage_messages=True)
    async def m_clean(self, interaction: Interaction, amount: app_commands.Range[int, 1, 100]):
        await interaction.response.defer(ephemeral=True, thinking=True)
        chan = interaction.channel
        assert isinstance(chan, TextChannel)
        deleted = await chan.purge(limit=amount, before=interaction.created_at)
        await interaction.followup.send(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(deleted)}", ephemeral=True)

    @mega.command(name="slowmode", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º")
    @require_perms(manage_channels=True)
    async def m_slowmode(self, interaction: Interaction, delay: app_commands.Range[int, 0, 21600]):
        chan = interaction.channel
        assert isinstance(chan, TextChannel)
        await chan.edit(slowmode_delay=delay)
        await interaction.response.send_message(f"‚è±Ô∏è Slowmode: {delay}s", ephemeral=True)

    @mega.command(name="nick", description="–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫ —É—á–∞—Å—Ç–Ω–∏–∫—É")
    @require_perms(manage_nicknames=True)
    async def m_nick(self, interaction: Interaction, member: Member, nickname: str | None = None):
        await member.edit(nick=nickname)
        await interaction.response.send_message("‚úÖ –ù–∏–∫ –∏–∑–º–µ–Ω—ë–Ω.", ephemeral=True)

    # ---------- info ----------
    @mega.command(name="roleinfo", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏")
    async def m_roleinfo(self, interaction: Interaction, role: Role):
        embed = Embed(title=f"–†–æ–ª—å: {role.name}", color=role.color or discord.Color.blurple())
        embed.add_field(name="ID", value=str(role.id))
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(sum(1 for m in interaction.guild.members if role in m.roles)))
        embed.add_field(name="–°–æ–∑–¥–∞–Ω–∞", value=discord.utils.format_dt(role.created_at, style='R'))
        embed.add_field(name="–ü–æ–∑–∏—Ü–∏—è", value=str(role.position))
        embed.set_footer(text=f"–ü–æ–∫—Ä–∞—Å: {role.color}")
        await interaction.response.send_message(embed=embed)

    @mega.command(name="serverinfo", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
    async def m_serverinfo(self, interaction: Interaction):
        g = interaction.guild
        embed = Embed(title=g.name, color=discord.Color.blurple())
        if g.icon:
            embed.set_thumbnail(url=g.icon.url)
        embed.add_field(name="ID", value=str(g.id))
        embed.add_field(name="–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤", value=str(g.member_count))
        embed.add_field(name="–°–æ–∑–¥–∞–Ω", value=discord.utils.format_dt(g.created_at, style='R'))
        embed.add_field(name="–ö–∞–Ω–∞–ª–æ–≤", value=str(len(g.channels)))
        await interaction.response.send_message(embed=embed)

    @mega.command(name="userinfo", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    async def m_userinfo(self, interaction: Interaction, user: Member | None = None):
        user = user or interaction.user
        roles = [r.mention for r in user.roles if r.name != "@everyone"]
        embed = Embed(title=str(user), color=user.top_role.color if hasattr(user, "top_role") else discord.Color.blurple())
        embed.set_thumbnail(url=user.display_avatar.url)
        embed.add_field(name="ID", value=str(user.id))
        embed.add_field(name="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω", value=discord.utils.format_dt(user.created_at, style='R'))
        if hasattr(user, "joined_at") and user.joined_at:
            embed.add_field(name="–ó–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä", value=discord.utils.format_dt(user.joined_at, style='R'))
        embed.add_field(name="–†–æ–ª–∏", value=", ".join(roles) if roles else "–Ω–µ—Ç", inline=False)
        await interaction.response.send_message(embed=embed)


async def setup(bot: commands.Bot):
    if not any(isinstance(cmd, app_commands.Command) and cmd.name == mega.name for cmd in bot.tree.get_commands()):
        bot.tree.add_command(mega)
    await bot.add_cog(Mega(bot))